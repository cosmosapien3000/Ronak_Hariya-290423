@Override
	public List<Customer> searchCustomerByFirstName(String firstName) {
		
		System.out.println("Inside Search by first Name Impl: "+firstName);
		// Use of Ready made implementations provided in JPA Repository
		List<Customer>customers= customerdao.findAll();
		List<Customer> matchedCustomers=new ArrayList<Customer>();
		for(Customer c:customers)
		{
			System.out.println(c.toString());
			if(c.getFirstName().toLowerCase().contains(firstName.toLowerCase()))
			{
				
				matchedCustomers.add(c); /* Added in List if Matched the requirement*/
			}
				
				
		}
		return matchedCustomers;
			
		
	}
/* Changes After Modification 3*/
	@Override
	public boolean register(RegisterDTO regdto) {
		System.out.println("Inside Customer-Service-Impl");
		Customer newCustomer=new Customer();
		
		// Check if user with this mobile number already exists
		for(String mobile:regdto.getMobileNumbers())
		{
			Query query = entityManager.createQuery("SELECT c FROM Customer c JOIN c.mobileNumbers m WHERE m = :mobile");
			query.setParameter("mobile", mobile);
			if(!query.getResultList().isEmpty())
				return false;
			
		}
		
		// Save the user to the database
       newCustomer.setFirstName(regdto.getFirstName());
       newCustomer.setLastName(regdto.getLastName());
       newCustomer.setMobileNumbers(regdto.getMobileNumbers());
       customerdao.save(newCustomer);
        System.out.println("User saved to Database successfully..!");
        return true;
        	
		
	}

	
	@Override
	public List<Customer> searchCustomerByLastName(String lastName) {
		
		// Use of Ready made implementations provided in JPA Repository
		List<Customer>customers= customerdao.findAll();
		List<Customer> matchedCustomers=new ArrayList<Customer>();
		for(Customer c:customers)
		{
			
			if(c.getLastName().toLowerCase().contains(lastName.toLowerCase()))
				matchedCustomers.add(c); /* Added in List if Matched the requirement*/
				
		}
		return matchedCustomers;
		
	}

	@Override
	public List<Customer> searchCustomerByMobile(String mobile) {
		
		Query query = entityManager.createQuery("SELECT c FROM Customer c JOIN c.mobileNumbers m WHERE m = :mobile");
		query.setParameter("mobile", mobile);
		return query.getResultList();

	}

	@Override
	public boolean deleteCustomer(String mobile) {
		
		System.out.println("Inside Delete Customer Service-Impl Method");
		Query query = entityManager.createQuery("SELECT c FROM Customer c JOIN c.mobileNumbers m WHERE m = :mobile");
		query.setParameter("mobile", mobile);
		Customer oldCustomer=new Customer();
		
		// If No such Customer Found
		if(query.getResultList().isEmpty())
		{
			System.out.println("No such Customer Found!");
			return false;

		}
			
		
		else {
			
		// If Valid Customer Found
			List<Customer> customers = query.getResultList();
			oldCustomer = customers.get(0);
			customerdao.delete(oldCustomer);
			System.out.println("Customer Deleted Successfully..!");
			return true;
		}
		
	}

	@Override
	public boolean addAlternateMobile(int id,String mobile) {
		
		Customer oldCustomer=customerdao.findById(id);
		if(oldCustomer!=null)
		{
			System.out.println("Numbers Associated before :"+oldCustomer.getMobileNumbers().toString());
			System.out.println("New Number :"+mobile);
			oldCustomer.getMobileNumbers().add(mobile);
			System.out.println("Numbers Associated After:"+oldCustomer.getMobileNumbers().toString());

			return true;
			
		}
		// If a Customer is InValid!
		return false;
	}

	@Override
	public boolean removeAlternateMobile(int id,String mobile) {
		Customer oldCustomer=customerdao.findById(id);
		if(oldCustomer!=null)
		{
			System.out.println("Numbers Associated before :"+oldCustomer.getMobileNumbers().toString());
			System.out.println("New Number :"+mobile);
			//Trim the List to remove mobile number
			List <String> revisedList=oldCustomer.getMobileNumbers().stream().filter(m->!m.equals(mobile)).collect(Collectors.toList());
			System.out.println(revisedList.toString());
			oldCustomer.setMobileNumbers(revisedList);
			System.out.println("Numbers Associated After:"+oldCustomer.getMobileNumbers().toString());

			return true;
			
		}
		// If a Customer is InValid!
		return false;
	}
	